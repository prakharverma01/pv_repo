'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = reducer;

var _constants = require('../constants.js');

var _toggle = require('../helpers/toggle.js');

var _toggle2 = _interopRequireDefault(_toggle);

var _redux = require('redux');

var _buildOptions = require('../helpers/buildOptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function appliedFilters() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    switch (action.type) {
        case _constants.TOGGLE_FILTER:
            var _action$filter = action.filter,
                key = _action$filter.attribute,
                value = _action$filter.value;

            return (0, _toggle2.default)(state, key, value);
        case _constants.TOGGLE_FILTER_ONLY:
            return (0, _toggle.toggleOnly)(state, action.filter.attribute, action.filter.value);
        case _constants.CLEAR_FILTERS:
            return (0, _toggle.clearFilter)(state, action.filter.attribute);
        case _constants.CLEAR_ALL_FILTERS:
            return {};
        default:
            return state;
    }
}
function keywordSearch() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    switch (action.type) {
        case _constants.KEYWORD_SEARCH:
            return action.search;
        default:
            return state;
    }
}

function sortFn() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { fn: function fn(items) {
            return items;
        } };
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    switch (action.type) {
        case _constants.APPLY_SORT:
            return action.func;
        default:
            return state;
    }
}

function page() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


    switch (action.type) {
        case _constants.GO_TO_PAGE:
            return action.page;
        case _constants.TOGGLE_FILTER:
        case _constants.TOGGLE_FILTER_ONLY:
        case _constants.CLEAR_FILTERS:
        case _constants.CLEAR_ALL_FILTERS:
        case _constants.KEYWORD_SEARCH:
            return 0; // reset to zero
        default:
            return state;
    }
}

function optionGroups() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return state;
}

function subjects() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    switch (action.type) {
        case _constants.UPDATE_SUBJECTS:
            return action.subjects;
        default:
            return state;
    }
}

function identity() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return state;
}

var combinedReducers = (0, _redux.combineReducers)({
    appliedFilters: appliedFilters,
    keywordSearch: keywordSearch,
    sortFn: sortFn,
    page: page,
    optionGroups: optionGroups,

    // previously global config options

    subjects: subjects,
    filterableCriteria: identity,
    filterableCriteriaSortOptions: identity,
    searchKeys: identity,
    sortItems: identity,
    searchThreshold: identity,
    filterFns: identity
});

function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var compiledState = combinedReducers(state, action);

    if (action.type == _constants.UPDATE_SUBJECTS || action.type == _constants.INIT) {
        var _buildOptionsList = (0, _buildOptions.buildOptionsList)(compiledState.subjects, compiledState.filterableCriteria, compiledState.filterableCriteriaSortOptions),
            filterFns = _buildOptionsList.filterFns,
            _optionGroups = _buildOptionsList.optionGroups;

        return _extends({}, compiledState, { filterFns: filterFns, optionGroups: _optionGroups });
    }
    return compiledState;
}