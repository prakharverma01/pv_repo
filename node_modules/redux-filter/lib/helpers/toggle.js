'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = toggle;
exports.toggleOnly = toggleOnly;
exports.clearFilter = clearFilter;

var _lodash = require('lodash.omit');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * {
 * [attribute]: [values],
 * [attribute]: [values]
 * }
 *
 */

function removeElement(obj, key, arr, index) {
    var removedArray = [].concat(_toConsumableArray(arr.slice(0, index)), _toConsumableArray(arr.slice(index + 1)));
    // if there is no items on the array, do not set a key on the filter object
    if (removedArray.length) {
        return _extends({}, obj, _defineProperty({}, key, removedArray));
    } else {
        // no item here, remove that key (in a non mutative way)
        return (0, _lodash2.default)(obj, key);
    }
}

function addElement(obj, key, arr, value) {
    return _extends({}, obj, _defineProperty({}, key, arr.concat(value)));
}

function toggle(filters, key, value) {
    var currentFilterArray = filters[key] || [];
    // check if the value is in the currentFilterArray, then add or remove it
    var indexOfValueInCurrentFilterArray = currentFilterArray.indexOf(value);
    if (indexOfValueInCurrentFilterArray > -1) {
        return removeElement(filters, key, currentFilterArray, indexOfValueInCurrentFilterArray);
    } else {
        return addElement(filters, key, currentFilterArray, value);
    }
}

function toggleOnly(filters, key, value) {
    return _extends({}, filters, _defineProperty({}, key, [value]));
}

function clearFilter(filters, key) {
    return (0, _lodash2.default)(filters, key);
}